/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Hello API Platform
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  ApiArticlesGetCollection200,
  ArticleJsonld
} from '.././models'

export const getApiArticlesGetCollectionResponseMock = (overrideResponse: Partial< ApiArticlesGetCollection200 > = {}): ApiArticlesGetCollection200 => ({member: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({'@context': faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20),{'@vocab': faker.string.alpha(20), hydra: faker.helpers.arrayElement(['http://www.w3.org/ns/hydra/core#'] as const)},]), undefined]), '@id': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), '@type': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), totalItems: faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), undefined]), view: faker.helpers.arrayElement([{'@id': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), '@type': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), first: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), last: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), previous: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), next: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), search: faker.helpers.arrayElement([{'@type': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), template: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), variableRepresentation: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mapping: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({'@type': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), variable: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), property: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20),null,]), undefined]), required: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])}, undefined]), ...overrideResponse})

export const getApiArticlesPostResponseMock = (overrideResponse: Partial< ArticleJsonld > = {}): ArticleJsonld => ({'@context': faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20),{'@vocab': faker.string.alpha(20), hydra: faker.helpers.arrayElement(['http://www.w3.org/ns/hydra/core#'] as const)},]), undefined]), '@id': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), '@type': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getApiArticlesIdGetResponseMock = (overrideResponse: Partial< ArticleJsonld > = {}): ArticleJsonld => ({'@context': faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20),{'@vocab': faker.string.alpha(20), hydra: faker.helpers.arrayElement(['http://www.w3.org/ns/hydra/core#'] as const)},]), undefined]), '@id': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), '@type': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getApiArticlesIdPatchResponseMock = (overrideResponse: Partial< ArticleJsonld > = {}): ArticleJsonld => ({'@context': faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20),{'@vocab': faker.string.alpha(20), hydra: faker.helpers.arrayElement(['http://www.w3.org/ns/hydra/core#'] as const)},]), undefined]), '@id': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), '@type': faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getApiArticlesGetCollectionMockHandler = (overrideResponse?: ApiArticlesGetCollection200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ApiArticlesGetCollection200> | ApiArticlesGetCollection200)) => {
  return http.get('*/api/articles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiArticlesGetCollectionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiArticlesPostMockHandler = (overrideResponse?: ArticleJsonld | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ArticleJsonld> | ArticleJsonld)) => {
  return http.post('*/api/articles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiArticlesPostResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiArticlesIdGetMockHandler = (overrideResponse?: ArticleJsonld | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ArticleJsonld> | ArticleJsonld)) => {
  return http.get('*/api/articles/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiArticlesIdGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiArticlesIdDeleteMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/articles/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiArticlesIdPatchMockHandler = (overrideResponse?: ArticleJsonld | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ArticleJsonld> | ArticleJsonld)) => {
  return http.patch('*/api/articles/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiArticlesIdPatchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getArticleMock = () => [
  getApiArticlesGetCollectionMockHandler(),
  getApiArticlesPostMockHandler(),
  getApiArticlesIdGetMockHandler(),
  getApiArticlesIdDeleteMockHandler(),
  getApiArticlesIdPatchMockHandler()
]
