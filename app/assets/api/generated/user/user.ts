/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * MyBudget API
 * API for budget and savings management
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { GetApiUsersGet200, GetApiUsersGet401 } from '../../models'

import { customInstance } from '../../axiosInstance'

/**
 * Get the connected user information
 * @summary User authenticated
 */
export const getApiUsersGet = (signal?: AbortSignal) => {
  return customInstance<GetApiUsersGet200>({ url: `/api/users/me`, method: 'GET', signal })
}

export const getGetApiUsersGetQueryKey = () => {
  return [`/api/users/me`] as const
}

export const getGetApiUsersGetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersGet>>>,
  TError = GetApiUsersGet401,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersGet>>> = ({ signal }) =>
    getApiUsersGet(signal)

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersGetInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersGet>>
>
export type GetApiUsersGetInfiniteQueryError = GetApiUsersGet401

export function useGetApiUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersGet>>>,
  TError = GetApiUsersGet401,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersGet>>>,
  TError = GetApiUsersGet401,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersGet>>>,
  TError = GetApiUsersGet401,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary User authenticated
 */

export function useGetApiUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersGet>>>,
  TError = GetApiUsersGet401,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiUsersGetInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetApiUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersGet>>,
  TError = GetApiUsersGet401,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersGet>>> = ({ signal }) =>
    getApiUsersGet(signal)

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersGet>>>
export type GetApiUsersGetQueryError = GetApiUsersGet401

export function useGetApiUsersGet<
  TData = Awaited<ReturnType<typeof getApiUsersGet>>,
  TError = GetApiUsersGet401,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersGet<
  TData = Awaited<ReturnType<typeof getApiUsersGet>>,
  TError = GetApiUsersGet401,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersGet<
  TData = Awaited<ReturnType<typeof getApiUsersGet>>,
  TError = GetApiUsersGet401,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary User authenticated
 */

export function useGetApiUsersGet<
  TData = Awaited<ReturnType<typeof getApiUsersGet>>,
  TError = GetApiUsersGet401,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersGet>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiUsersGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
