/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * MyBudget API
 * API for budget and savings management
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { GetApiBalanceHistory200, GetApiBalanceHistoryParams } from '../../models'

import { customInstance } from '../../axiosInstance'

/**
 * Get the monthly balance history
 * @summary Balance history
 */
export const getApiBalanceHistory = (params?: GetApiBalanceHistoryParams, signal?: AbortSignal) => {
  return customInstance<GetApiBalanceHistory200>({
    url: `/api/accounts/balance-history`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetApiBalanceHistoryQueryKey = (params?: GetApiBalanceHistoryParams) => {
  return [`/api/accounts/balance-history`, ...(params ? [params] : [])] as const
}

export const getGetApiBalanceHistoryInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    GetApiBalanceHistoryParams['page']
  >,
  TError = unknown,
>(
  params?: GetApiBalanceHistoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        QueryKey,
        GetApiBalanceHistoryParams['page']
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiBalanceHistoryQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    QueryKey,
    GetApiBalanceHistoryParams['page']
  > = ({ signal, pageParam }) =>
    getApiBalanceHistory({ ...params, page: pageParam || params?.['page'] }, signal)

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    QueryKey,
    GetApiBalanceHistoryParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiBalanceHistoryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBalanceHistory>>
>
export type GetApiBalanceHistoryInfiniteQueryError = unknown

export function useGetApiBalanceHistoryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    GetApiBalanceHistoryParams['page']
  >,
  TError = unknown,
>(
  params: undefined | GetApiBalanceHistoryParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        QueryKey,
        GetApiBalanceHistoryParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBalanceHistory>>,
          TError,
          Awaited<ReturnType<typeof getApiBalanceHistory>>,
          QueryKey
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBalanceHistoryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    GetApiBalanceHistoryParams['page']
  >,
  TError = unknown,
>(
  params?: GetApiBalanceHistoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        QueryKey,
        GetApiBalanceHistoryParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBalanceHistory>>,
          TError,
          Awaited<ReturnType<typeof getApiBalanceHistory>>,
          QueryKey
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBalanceHistoryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    GetApiBalanceHistoryParams['page']
  >,
  TError = unknown,
>(
  params?: GetApiBalanceHistoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        QueryKey,
        GetApiBalanceHistoryParams['page']
      >
    >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Balance history
 */

export function useGetApiBalanceHistoryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    GetApiBalanceHistoryParams['page']
  >,
  TError = unknown,
>(
  params?: GetApiBalanceHistoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getApiBalanceHistory>>,
        QueryKey,
        GetApiBalanceHistoryParams['page']
      >
    >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiBalanceHistoryInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetApiBalanceHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBalanceHistory>>,
  TError = unknown,
>(
  params?: GetApiBalanceHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBalanceHistory>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiBalanceHistoryQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBalanceHistory>>> = ({ signal }) =>
    getApiBalanceHistory(params, signal)

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBalanceHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiBalanceHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBalanceHistory>>
>
export type GetApiBalanceHistoryQueryError = unknown

export function useGetApiBalanceHistory<
  TData = Awaited<ReturnType<typeof getApiBalanceHistory>>,
  TError = unknown,
>(
  params: undefined | GetApiBalanceHistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBalanceHistory>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBalanceHistory>>,
          TError,
          Awaited<ReturnType<typeof getApiBalanceHistory>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBalanceHistory<
  TData = Awaited<ReturnType<typeof getApiBalanceHistory>>,
  TError = unknown,
>(
  params?: GetApiBalanceHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBalanceHistory>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBalanceHistory>>,
          TError,
          Awaited<ReturnType<typeof getApiBalanceHistory>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiBalanceHistory<
  TData = Awaited<ReturnType<typeof getApiBalanceHistory>>,
  TError = unknown,
>(
  params?: GetApiBalanceHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBalanceHistory>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Balance history
 */

export function useGetApiBalanceHistory<
  TData = Awaited<ReturnType<typeof getApiBalanceHistory>>,
  TError = unknown,
>(
  params?: GetApiBalanceHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBalanceHistory>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiBalanceHistoryQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
