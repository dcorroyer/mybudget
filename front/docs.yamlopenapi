{ openapi: 3.1.0, info: { title: 'Hello API Platform', description: '', version: 1.0.0 }, servers: [{ url: /, description: '' }], paths: { /api/articles: { get: { operationId: api_articles_get_collection, tags: [Article], responses: { 200: { description: 'Article collection', content: { application/ld+json: { schema: { type: object, properties: { member: { type: array, items: { $ref: '#/components/schemas/Article.jsonld' } }, totalItems: { type: integer, minimum: 0 }, view: { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, first: { type: string, format: iri-reference }, last: { type: string, format: iri-reference }, previous: { type: string, format: iri-reference }, next: { type: string, format: iri-reference } }, example: { '@id': string, type: string, first: string, last: string, previous: string, next: string } }, search: { type: object, properties: { '@type': { type: string }, template: { type: string }, variableRepresentation: { type: string }, mapping: { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: [string, 'null'] }, required: { type: boolean } } } } } } }, required: [member] } } } } }, summary: 'Retrieves the collection of Article resources.', description: 'Retrieves the collection of Article resources.', parameters: [{ name: page, in: query, description: 'The collection page number', required: false, deprecated: false, allowEmptyValue: true, schema: { type: integer, default: 1 }, style: form, explode: false, allowReserved: false }], deprecated: false }, post: { operationId: api_articles_post, tags: [Article], responses: { 201: { description: 'Article resource created', content: { application/ld+json: { schema: { $ref: '#/components/schemas/Article.jsonld' } } }, links: null }, 400: { description: 'Invalid input' }, 422: { description: 'Unprocessable entity' } }, summary: 'Creates a Article resource.', description: 'Creates a Article resource.', parameters: {  }, requestBody: { description: 'The new Article resource', content: { application/ld+json: { schema: { $ref: '#/components/schemas/Article.jsonld' } } }, required: true }, deprecated: false } }, '/api/articles/{id}': { get: { operationId: api_articles_id_get, tags: [Article], responses: { 200: { description: 'Article resource', content: { application/ld+json: { schema: { $ref: '#/components/schemas/Article.jsonld' } } } }, 404: { description: 'Resource not found' } }, summary: 'Retrieves a Article resource.', description: 'Retrieves a Article resource.', parameters: [{ name: id, in: path, description: 'Article identifier', required: true, deprecated: false, allowEmptyValue: false, schema: { type: string }, style: simple, explode: false, allowReserved: false }], deprecated: false }, delete: { operationId: api_articles_id_delete, tags: [Article], responses: { 204: { description: 'Article resource deleted' }, 404: { description: 'Resource not found' } }, summary: 'Removes the Article resource.', description: 'Removes the Article resource.', parameters: [{ name: id, in: path, description: 'Article identifier', required: true, deprecated: false, allowEmptyValue: false, schema: { type: string }, style: simple, explode: false, allowReserved: false }], deprecated: false }, patch: { operationId: api_articles_id_patch, tags: [Article], responses: { 200: { description: 'Article resource updated', content: { application/ld+json: { schema: { $ref: '#/components/schemas/Article.jsonld' } } }, links: null }, 400: { description: 'Invalid input' }, 422: { description: 'Unprocessable entity' }, 404: { description: 'Resource not found' } }, summary: 'Updates the Article resource.', description: 'Updates the Article resource.', parameters: [{ name: id, in: path, description: 'Article identifier', required: true, deprecated: false, allowEmptyValue: false, schema: { type: string }, style: simple, explode: false, allowReserved: false }], requestBody: { description: 'The updated Article resource', content: { application/merge-patch+json: { schema: { $ref: '#/components/schemas/Article' } } }, required: true }, deprecated: false } } }, components: { schemas: { Article: { type: object, description: '', deprecated: false, properties: { id: { readOnly: true, type: integer }, title: { type: string }, description: { type: string } } }, Article.jsonld: { type: object, description: '', deprecated: false, properties: { '@context': { readOnly: true, oneOf: [{ type: string }, { type: object, properties: { '@vocab': { type: string }, hydra: { type: string, enum: ['http://www.w3.org/ns/hydra/core#'] } }, required: ['@vocab', hydra], additionalProperties: true }] }, '@id': { readOnly: true, type: string }, '@type': { readOnly: true, type: string }, id: { readOnly: true, type: integer }, title: { type: string }, description: { type: string } } } }, responses: null, parameters: null, examples: null, requestBodies: null, headers: null, securitySchemes: null }, security: {  }, tags: {  }, webhooks: null }