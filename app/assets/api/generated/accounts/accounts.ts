/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * MyBudget API
 * API for budget and savings management
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  AccountPayload,
  DeleteApiAccountsDelete400,
  DeleteApiAccountsDelete404,
  GetApiAccountsGet200,
  GetApiAccountsGet404,
  GetApiAccountsList200,
  PatchApiAccountsUpdate200,
  PatchApiAccountsUpdate400,
  PatchApiAccountsUpdate404,
  PostApiAccountsCreate201,
  PostApiAccountsCreate400,
} from '../../models'

import { customInstance } from '../../axiosInstance'

/**
 * Get a list of all accounts
 * @summary List accounts
 */
export const getApiAccountsList = (signal?: AbortSignal) => {
  return customInstance<GetApiAccountsList200>({ url: `/api/accounts`, method: 'GET', signal })
}

export const getGetApiAccountsListQueryKey = () => {
  return [`/api/accounts`] as const
}

export const getGetApiAccountsListInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsList>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiAccountsListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountsList>>> = ({ signal }) =>
    getApiAccountsList(signal)

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiAccountsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAccountsListInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountsList>>
>
export type GetApiAccountsListInfiniteQueryError = unknown

export function useGetApiAccountsListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsList>>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountsList>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountsList>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAccountsListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsList>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountsList>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountsList>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAccountsListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsList>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List accounts
 */

export function useGetApiAccountsListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsList>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiAccountsListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetApiAccountsListQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiAccountsListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountsList>>> = ({ signal }) =>
    getApiAccountsList(signal)

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAccountsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountsList>>
>
export type GetApiAccountsListQueryError = unknown

export function useGetApiAccountsList<
  TData = Awaited<ReturnType<typeof getApiAccountsList>>,
  TError = unknown,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountsList>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountsList>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAccountsList<
  TData = Awaited<ReturnType<typeof getApiAccountsList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountsList>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountsList>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAccountsList<
  TData = Awaited<ReturnType<typeof getApiAccountsList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List accounts
 */

export function useGetApiAccountsList<
  TData = Awaited<ReturnType<typeof getApiAccountsList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsList>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiAccountsListQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Create a new account
 * @summary Create an account
 */
export const postApiAccountsCreate = (accountPayload: AccountPayload, signal?: AbortSignal) => {
  return customInstance<PostApiAccountsCreate201>({
    url: `/api/accounts`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: accountPayload,
    signal,
  })
}

export const getPostApiAccountsCreateMutationOptions = <
  TError = PostApiAccountsCreate400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountsCreate>>,
    TError,
    { data: AccountPayload },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountsCreate>>,
  TError,
  { data: AccountPayload },
  TContext
> => {
  const mutationKey = ['postApiAccountsCreate']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountsCreate>>,
    { data: AccountPayload }
  > = (props) => {
    const { data } = props ?? {}

    return postApiAccountsCreate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiAccountsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountsCreate>>
>
export type PostApiAccountsCreateMutationBody = AccountPayload
export type PostApiAccountsCreateMutationError = PostApiAccountsCreate400

/**
 * @summary Create an account
 */
export const usePostApiAccountsCreate = <TError = PostApiAccountsCreate400, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAccountsCreate>>,
      TError,
      { data: AccountPayload },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountsCreate>>,
  TError,
  { data: AccountPayload },
  TContext
> => {
  const mutationOptions = getPostApiAccountsCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Retrieve an account by its ID
 * @summary Get an account
 */
export const getApiAccountsGet = (id: number, signal?: AbortSignal) => {
  return customInstance<GetApiAccountsGet200>({ url: `/api/accounts/${id}`, method: 'GET', signal })
}

export const getGetApiAccountsGetQueryKey = (id: number) => {
  return [`/api/accounts/${id}`] as const
}

export const getGetApiAccountsGetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsGet>>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiAccountsGetQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountsGet>>> = ({ signal }) =>
    getApiAccountsGet(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }
}

export type GetApiAccountsGetInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountsGet>>
>
export type GetApiAccountsGetInfiniteQueryError = GetApiAccountsGet404

export function useGetApiAccountsGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsGet>>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountsGet>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAccountsGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsGet>>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountsGet>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAccountsGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsGet>>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get an account
 */

export function useGetApiAccountsGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiAccountsGet>>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiAccountsGetInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetApiAccountsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountsGet>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiAccountsGetQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountsGet>>> = ({ signal }) =>
    getApiAccountsGet(id, signal)

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAccountsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountsGet>>
>
export type GetApiAccountsGetQueryError = GetApiAccountsGet404

export function useGetApiAccountsGet<
  TData = Awaited<ReturnType<typeof getApiAccountsGet>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountsGet>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAccountsGet<
  TData = Awaited<ReturnType<typeof getApiAccountsGet>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountsGet>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAccountsGet<
  TData = Awaited<ReturnType<typeof getApiAccountsGet>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get an account
 */

export function useGetApiAccountsGet<
  TData = Awaited<ReturnType<typeof getApiAccountsGet>>,
  TError = GetApiAccountsGet404,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountsGet>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiAccountsGetQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete an existing account
 * @summary Delete an account
 */
export const deleteApiAccountsDelete = (id: number) => {
  return customInstance<void>({ url: `/api/accounts/${id}`, method: 'DELETE' })
}

export const getDeleteApiAccountsDeleteMutationOptions = <
  TError = DeleteApiAccountsDelete400 | DeleteApiAccountsDelete404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiAccountsDelete>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiAccountsDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteApiAccountsDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiAccountsDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return deleteApiAccountsDelete(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteApiAccountsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiAccountsDelete>>
>

export type DeleteApiAccountsDeleteMutationError =
  | DeleteApiAccountsDelete400
  | DeleteApiAccountsDelete404

/**
 * @summary Delete an account
 */
export const useDeleteApiAccountsDelete = <
  TError = DeleteApiAccountsDelete400 | DeleteApiAccountsDelete404,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiAccountsDelete>>,
      TError,
      { id: number },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiAccountsDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiAccountsDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Update an existing account
 * @summary Update an account
 */
export const patchApiAccountsUpdate = (id: number, accountPayload: AccountPayload) => {
  return customInstance<PatchApiAccountsUpdate200>({
    url: `/api/accounts/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: accountPayload,
  })
}

export const getPatchApiAccountsUpdateMutationOptions = <
  TError = PatchApiAccountsUpdate400 | PatchApiAccountsUpdate404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiAccountsUpdate>>,
    TError,
    { id: number; data: AccountPayload },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiAccountsUpdate>>,
  TError,
  { id: number; data: AccountPayload },
  TContext
> => {
  const mutationKey = ['patchApiAccountsUpdate']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiAccountsUpdate>>,
    { id: number; data: AccountPayload }
  > = (props) => {
    const { id, data } = props ?? {}

    return patchApiAccountsUpdate(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchApiAccountsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiAccountsUpdate>>
>
export type PatchApiAccountsUpdateMutationBody = AccountPayload
export type PatchApiAccountsUpdateMutationError =
  | PatchApiAccountsUpdate400
  | PatchApiAccountsUpdate404

/**
 * @summary Update an account
 */
export const usePatchApiAccountsUpdate = <
  TError = PatchApiAccountsUpdate400 | PatchApiAccountsUpdate404,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchApiAccountsUpdate>>,
      TError,
      { id: number; data: AccountPayload },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchApiAccountsUpdate>>,
  TError,
  { id: number; data: AccountPayload },
  TContext
> => {
  const mutationOptions = getPatchApiAccountsUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
